/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { TitleAbstract } from '../models/title-abstract';
import { titleAbstractGet } from '../fn/title-abstract/title-abstract-get';
import { TitleAbstractGet$Params } from '../fn/title-abstract/title-abstract-get';
import { titleAbstractGet$Plain } from '../fn/title-abstract/title-abstract-get-plain';
import { TitleAbstractGet$Plain$Params } from '../fn/title-abstract/title-abstract-get-plain';
import { titleAbstractIdDelete } from '../fn/title-abstract/title-abstract-id-delete';
import { TitleAbstractIdDelete$Params } from '../fn/title-abstract/title-abstract-id-delete';
import { titleAbstractIdGet } from '../fn/title-abstract/title-abstract-id-get';
import { TitleAbstractIdGet$Params } from '../fn/title-abstract/title-abstract-id-get';
import { titleAbstractIdGet$Plain } from '../fn/title-abstract/title-abstract-id-get-plain';
import { TitleAbstractIdGet$Plain$Params } from '../fn/title-abstract/title-abstract-id-get-plain';
import { titleAbstractIdPut } from '../fn/title-abstract/title-abstract-id-put';
import { TitleAbstractIdPut$Params } from '../fn/title-abstract/title-abstract-id-put';
import { titleAbstractIdPut$Plain } from '../fn/title-abstract/title-abstract-id-put-plain';
import { TitleAbstractIdPut$Plain$Params } from '../fn/title-abstract/title-abstract-id-put-plain';
import { titleAbstractOrderIdGet } from '../fn/title-abstract/title-abstract-order-id-get';
import { TitleAbstractOrderIdGet$Params } from '../fn/title-abstract/title-abstract-order-id-get';
import { titleAbstractOrderIdGet$Plain } from '../fn/title-abstract/title-abstract-order-id-get-plain';
import { TitleAbstractOrderIdGet$Plain$Params } from '../fn/title-abstract/title-abstract-order-id-get-plain';
import { titleAbstractPost } from '../fn/title-abstract/title-abstract-post';
import { TitleAbstractPost$Params } from '../fn/title-abstract/title-abstract-post';
import { titleAbstractPost$Plain } from '../fn/title-abstract/title-abstract-post-plain';
import { TitleAbstractPost$Plain$Params } from '../fn/title-abstract/title-abstract-post-plain';

@Injectable({ providedIn: 'root' })
export class TitleAbstractService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `titleAbstractGet()` */
  static readonly TitleAbstractGetPath = '/TitleAbstract';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `titleAbstractGet$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  titleAbstractGet$Plain$Response(params?: TitleAbstractGet$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<TitleAbstract>>> {
    return titleAbstractGet$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `titleAbstractGet$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  titleAbstractGet$Plain(params?: TitleAbstractGet$Plain$Params, context?: HttpContext): Observable<Array<TitleAbstract>> {
    return this.titleAbstractGet$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<TitleAbstract>>): Array<TitleAbstract> => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `titleAbstractGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  titleAbstractGet$Response(params?: TitleAbstractGet$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<TitleAbstract>>> {
    return titleAbstractGet(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `titleAbstractGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  titleAbstractGet(params?: TitleAbstractGet$Params, context?: HttpContext): Observable<Array<TitleAbstract>> {
    return this.titleAbstractGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<TitleAbstract>>): Array<TitleAbstract> => r.body)
    );
  }

  /** Path part for operation `titleAbstractPost()` */
  static readonly TitleAbstractPostPath = '/TitleAbstract';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `titleAbstractPost$Plain()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  titleAbstractPost$Plain$Response(params?: TitleAbstractPost$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<TitleAbstract>> {
    return titleAbstractPost$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `titleAbstractPost$Plain$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  titleAbstractPost$Plain(params?: TitleAbstractPost$Plain$Params, context?: HttpContext): Observable<TitleAbstract> {
    return this.titleAbstractPost$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<TitleAbstract>): TitleAbstract => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `titleAbstractPost()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  titleAbstractPost$Response(params?: TitleAbstractPost$Params, context?: HttpContext): Observable<StrictHttpResponse<TitleAbstract>> {
    return titleAbstractPost(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `titleAbstractPost$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  titleAbstractPost(params?: TitleAbstractPost$Params, context?: HttpContext): Observable<TitleAbstract> {
    return this.titleAbstractPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<TitleAbstract>): TitleAbstract => r.body)
    );
  }

  /** Path part for operation `titleAbstractIdGet()` */
  static readonly TitleAbstractIdGetPath = '/TitleAbstract/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `titleAbstractIdGet$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  titleAbstractIdGet$Plain$Response(params: TitleAbstractIdGet$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<TitleAbstract>> {
    return titleAbstractIdGet$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `titleAbstractIdGet$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  titleAbstractIdGet$Plain(params: TitleAbstractIdGet$Plain$Params, context?: HttpContext): Observable<TitleAbstract> {
    return this.titleAbstractIdGet$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<TitleAbstract>): TitleAbstract => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `titleAbstractIdGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  titleAbstractIdGet$Response(params: TitleAbstractIdGet$Params, context?: HttpContext): Observable<StrictHttpResponse<TitleAbstract>> {
    return titleAbstractIdGet(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `titleAbstractIdGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  titleAbstractIdGet(params: TitleAbstractIdGet$Params, context?: HttpContext): Observable<TitleAbstract> {
    return this.titleAbstractIdGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<TitleAbstract>): TitleAbstract => r.body)
    );
  }

  /** Path part for operation `titleAbstractIdPut()` */
  static readonly TitleAbstractIdPutPath = '/TitleAbstract/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `titleAbstractIdPut$Plain()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  titleAbstractIdPut$Plain$Response(params: TitleAbstractIdPut$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<TitleAbstract>> {
    return titleAbstractIdPut$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `titleAbstractIdPut$Plain$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  titleAbstractIdPut$Plain(params: TitleAbstractIdPut$Plain$Params, context?: HttpContext): Observable<TitleAbstract> {
    return this.titleAbstractIdPut$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<TitleAbstract>): TitleAbstract => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `titleAbstractIdPut()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  titleAbstractIdPut$Response(params: TitleAbstractIdPut$Params, context?: HttpContext): Observable<StrictHttpResponse<TitleAbstract>> {
    return titleAbstractIdPut(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `titleAbstractIdPut$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  titleAbstractIdPut(params: TitleAbstractIdPut$Params, context?: HttpContext): Observable<TitleAbstract> {
    return this.titleAbstractIdPut$Response(params, context).pipe(
      map((r: StrictHttpResponse<TitleAbstract>): TitleAbstract => r.body)
    );
  }

  /** Path part for operation `titleAbstractIdDelete()` */
  static readonly TitleAbstractIdDeletePath = '/TitleAbstract/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `titleAbstractIdDelete()` instead.
   *
   * This method doesn't expect any request body.
   */
  titleAbstractIdDelete$Response(params: TitleAbstractIdDelete$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return titleAbstractIdDelete(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `titleAbstractIdDelete$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  titleAbstractIdDelete(params: TitleAbstractIdDelete$Params, context?: HttpContext): Observable<void> {
    return this.titleAbstractIdDelete$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `titleAbstractOrderIdGet()` */
  static readonly TitleAbstractOrderIdGetPath = '/TitleAbstract/{orderId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `titleAbstractOrderIdGet$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  titleAbstractOrderIdGet$Plain$Response(params: TitleAbstractOrderIdGet$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<TitleAbstract>> {
    return titleAbstractOrderIdGet$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `titleAbstractOrderIdGet$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  titleAbstractOrderIdGet$Plain(params: TitleAbstractOrderIdGet$Plain$Params, context?: HttpContext): Observable<TitleAbstract> {
    return this.titleAbstractOrderIdGet$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<TitleAbstract>): TitleAbstract => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `titleAbstractOrderIdGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  titleAbstractOrderIdGet$Response(params: TitleAbstractOrderIdGet$Params, context?: HttpContext): Observable<StrictHttpResponse<TitleAbstract>> {
    return titleAbstractOrderIdGet(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `titleAbstractOrderIdGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  titleAbstractOrderIdGet(params: TitleAbstractOrderIdGet$Params, context?: HttpContext): Observable<TitleAbstract> {
    return this.titleAbstractOrderIdGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<TitleAbstract>): TitleAbstract => r.body)
    );
  }

}
